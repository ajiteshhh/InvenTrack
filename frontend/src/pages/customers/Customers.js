import React, { useState } from "react";import { useData } from "../../context/DataContext";import AlertDialog from "../../components/AlertDialog";import { useNavigate } from "react-router-dom";import PhoneInput from "react-phone-number-input";import 'react-phone-number-input/style.css';import Error from "../../components/Error";import SearchBar from "./SearchBar";const Customer = () => {  const { customers = [], orders = [], addNewCustomer, deleteExistingCustomer, updateExistingCustomer } = useData();  const [searchTerm, setSearchTerm] = useState("");  const [sortBy, setSortBy] = useState("Most Orders");  const [showAddCustomer, setShowAddCustomer] = useState(false);  const [showEditCustomer, setShowEditCustomer] = useState(false);  const [selectedCustomer, setSelectedCustomer] = useState(null);  const [showDetailsModal, setShowDetailsModal] = useState(false);  const [deleteCustomer, setDeleteCustomer] = useState(null);  const [alertVisible, setAlertVisible] = useState(false);  const [newCustomer, setNewCustomer] = useState({    name: "",    email: "",    phone: "",    address: "",  });  const [error, setError] = useState("");  const navigate = useNavigate();  const handleChange = (e) => {    const { name, value } = e.target;    setNewCustomer((prevCustomer) => ({      ...prevCustomer,      [name]: value,    }));  };  const handleEditChange = (e) => {    const { name, value } = e.target;    setSelectedCustomer((prev) => ({      ...prev,      [name]: value,    }));  };  const sortCustomers = (data) => {    switch (sortBy) {      case "Most Orders":        return data.sort((a, b) => (b.total_order || 0) - (a.total_order || 0));      case "Recent Activity":        return data.sort((a, b) => new Date(b.created_at || 0) - new Date(a.created_at || 0));      case "Alphabetical":        return data.sort((a, b) => (a.name || '').localeCompare(b.name || ''));      default:        return data;    }  };  const filteredCustomers = (() => {    const safeCustomers = Array.isArray(customers) ? customers : [];    const safeOrders = Array.isArray(orders) ? orders : [];    return sortCustomers(        safeCustomers            .map((customer) => {              const customerOrders = safeOrders.filter((order) => order.customer_id === customer.id);              const totalSpent = customerOrders.reduce((sum, order) => sum + parseFloat(order.total_amount || 0), 0);              const totalOrders = customerOrders.length;              return {                ...customer,                total_spent: totalSpent.toFixed(2),                total_order: totalOrders,              };            })            .filter((customer) =>                `${customer.name || ''}`.toLowerCase().includes(searchTerm.toLowerCase())            )    );  })();  const resetAddForm = () => {    setNewCustomer({      name: "",      email: "",      phone: "",      address: "",    });    setError("");  };  const handleAddCustomer = async () => {    if(!newCustomer.name || !newCustomer.email || !newCustomer.phone || !newCustomer.address) {      setError("All fields are required");      return;    }    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;    if(!emailPattern.test(newCustomer.email)) {      setError("Email address is required");      return;    }    await addNewCustomer(newCustomer);    setShowAddCustomer(false);    resetAddForm();  };  const handleViewCustomerDetails = (customer) => {    setSelectedCustomer(customer);    setShowDetailsModal(true);  };  const handleEditCustomer = (customer) => {    setSelectedCustomer({...customer});    setError("");    setShowEditCustomer(true);  };  const handleSaveCustomer = async () => {    if (!selectedCustomer.name || !selectedCustomer.email || !selectedCustomer.phone || !selectedCustomer.address) {      setError("All fields are required");      return;    }    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;    if(!emailPattern.test(selectedCustomer.email)) {      setError("Email address is required");      return;    }    await updateExistingCustomer(selectedCustomer);    setShowEditCustomer(false);    setSelectedCustomer(null);    setError("");  };  const handleDeleteCustomer = async () => {    if (deleteCustomer) {      await deleteExistingCustomer(deleteCustomer.id);      setAlertVisible(false);      setDeleteCustomer(null);    }  };  const formatDate = (date) => {    if (!date) return 'N/A';    const parsedDate = new Date(date);    if (isNaN(parsedDate.getTime())) {      return 'Invalid date';    }    return new Intl.DateTimeFormat('en-US', {      year: 'numeric',      month: 'long',      day: '2-digit'    }).format(parsedDate);  };  const formatNumber = (num) => {    if (num >= 1e6) return (num / 1e6).toFixed(1) + "M+";    if (num >= 1e3) return (num / 1e3).toFixed(0) + "K+";    return num;  };  return (      <section id="customer_management" className="space-y-6 px-4">        <SearchBar            searchTerm={searchTerm}            setSearchTerm={setSearchTerm}            sortBy={sortBy}            setSortBy={setSortBy}            setShowAddCustomer={setShowAddCustomer}        />        {filteredCustomers.length > 0 ? (            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">              {filteredCustomers.map((customer) => (                  <div                      key={customer.id}                      className="bg-white rounded-lg border border-gray-200 overflow-hidden hover:shadow-lg transition-shadow"                  >                    <div className="p-6">                      <div className="flex items-start justify-between">                        <div className="flex items-center">                          <img className="w-12 h-12 rounded-lg"                               src={`https://avatar.iran.liara.run/public/${customer.id}`} alt=""/>                          <div className="ml-4">                            <h3 className="text-lg font-medium text-gray-900">                            {customer.name}                            </h3>                            <p className="text-sm text-gray-500">                              Customer since {formatDate(customer.created_at)}                            </p>                          </div>                        </div>                      </div>                      <div className="mt-4 space-y-2">                        <div className="flex items-center text-sm text-gray-600">                          <i className="fas fa-envelope w-5"></i>                          <span>{customer.email}</span>                        </div>                        <div className="flex items-center text-sm text-gray-600">                          <i className="fas fa-phone w-5"></i>                          <span>{customer.phone}</span>                        </div>                        <div className="flex items-center text-sm text-gray-600">                          <i className="fas fa-map-marker-alt w-5"></i>                          <span>{customer.address}</span>                        </div>                      </div>                      <div className="mt-6 grid grid-cols-2 gap-4">                        <div className="text-center bg-gray-50 rounded-lg p-2">                          <div className="text-lg font-semibold text-gray-900">{formatNumber(customer.total_order)}</div>                          <div className="text-xs text-gray-500">Orders</div>                        </div>                        <div className="text-center bg-gray-50 rounded-lg p-2">                          <div className="text-lg font-semibold text-gray-900">${formatNumber(customer.total_spent)}</div>                          <div className="text-xs text-gray-500">Total Spent</div>                        </div>                      </div>                      <div className="mt-6 flex justify-end space-x-2">                        <button                            onClick={() => handleViewCustomerDetails(customer)}                            className="p-2 text-primary-600 hover:text-primary-700 rounded-lg hover:bg-primary-50"                        >                          <i className="fas fa-eye"></i>                        </button>                        <button                            onClick={() => handleEditCustomer(customer)}                            className="p-2 text-primary-600 hover:text-primary-700 rounded-lg hover:bg-primary-50"                        >                          <i className="fas fa-edit"></i>                        </button>                        <button onClick={() => {                          setDeleteCustomer(customer);                          setAlertVisible(true);                        }} className="p-2 text-red-600 hover:text-red-700 rounded-lg hover:bg-red-50">                          <i className="fas fa-trash"></i>                        </button>                      </div>                    </div>                  </div>              ))}            </div>        ) : (            <div className="text-center text-gray-500 text-lg">No customers found.</div>        )}        {alertVisible && (            <AlertDialog                title="Delete Customer"                message="Are you sure you want to delete this customer?"                onConfirm={handleDeleteCustomer}                onCancel={() => setAlertVisible(false)}                type="Delete"            />        )}        {showDetailsModal && selectedCustomer && (            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">              <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">                {/* Modal Header */}                <div className="bg-white px-6 py-4 border-b border-gray-200">                  <div className="flex items-center justify-between">                    <div className="flex items-center">                      <img                          src="https://avatar.iran.liara.run/public"                          alt="Customer"                          className="w-12 h-12 rounded-full"                      />                      <div className="ml-4">                        <h3 className="text-lg font-medium text-gray-900">{selectedCustomer.name}</h3>                        <p className="text-sm text-gray-500">Customer since {formatDate(selectedCustomer.created_at)}</p>                      </div>                    </div>                    <button                        onClick={() => setShowDetailsModal(false)}                        className="text-gray-400 hover:text-gray-500"                    >                      <i className="fas fa-times"></i>                    </button>                  </div>                </div>                <div className="bg-white px-6 py-4">                  <div className="space-y-6">                    <div>                      <h4 className="text-sm font-medium text-gray-900 mb-2">Contact Information</h4>                      <div className="bg-gray-50 rounded-lg p-4 space-y-2">                        <div className="flex items-center text-sm">                          <i className="fas fa-envelope w-5 text-gray-400"></i>                          <span>{selectedCustomer.email}</span>                        </div>                        <div className="flex items-center text-sm">                          <i className="fas fa-phone w-5 text-gray-400"></i>                          <span>{selectedCustomer.phone}</span>                        </div>                        <div className="flex items-center text-sm">                          <i className="fas fa-map-marker-alt w-5 text-gray-400"></i>                          <span>{selectedCustomer.address}</span>                        </div>                      </div>                    </div>                    <div>                      <h5 className="text-sm font-medium text-gray-700 mb-2">Recent Orders</h5>                      <div className="border rounded-lg divide-y">                        <div className="p-4 flex items-center justify-between">                          {!selectedCustomer.latest_order_id ? (                              <div className="text-sm text-gray-500">No orders available</div>                          ) : (                              <>                                <div>                                  <div className="text-sm font-medium">#{selectedCustomer.latest_order_id}</div>                                  <div className="text-sm text-gray-500">{formatDate(selectedCustomer.latest_order_date)}</div>                                </div>                                <div className="text-right">                                  <div className="text-sm font-medium">${selectedCustomer.latest_total_amount}</div>                                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${                                      selectedCustomer.latest_status === "Completed"                                          ? "bg-green-100 text-green-800"                                          : selectedCustomer.latest_status === "Pending"                                              ? "bg-yellow-100 text-yellow-800"                                              : "bg-red-100 text-red-800"                                  }`}>                                      {selectedCustomer.latest_status}                                  </span>                                </div>                              </>                          )}                        </div>                      </div>                    </div>                    <div>                      <h4 className="text-sm font-medium text-gray-900 mb-2">Customer Statistics</h4>                      <div className="grid grid-cols-2 gap-4">                        <div className="bg-gray-50 rounded-lg p-4">                          <div className="text-2xl font-semibold text-primary-600">{selectedCustomer.total_order}</div>                          <div className="text-sm text-gray-500">Total Orders</div>                        </div>                        <div className="bg-gray-50 rounded-lg p-4">                          <div className="text-2xl font-semibold text-primary-600">${selectedCustomer.total_spent}</div>                          <div className="text-sm text-gray-500">Lifetime Value</div>                        </div>                      </div>                    </div>                  </div>                </div>                <div className="bg-gray-50 px-6 py-4 flex justify-end space-x-3">                  <button                      onClick={() => {                        setShowDetailsModal(false);                        navigate('/customers/details', {state: {id: selectedCustomer.id}});                      }}                      className="mt-3 sm:mt-0 sm:w-auto sm:text-sm w-24 inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">                    Export History                  </button>                  <a href={`mailto:${selectedCustomer.email}`}>                    <button                        className="w-40 inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:ml-3 sm:w-auto sm:text-sm">                      Contact Customer                    </button>                  </a>                </div>              </div>            </div>        )}        {showEditCustomer && selectedCustomer && (            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">              <div                  className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">                <div className="bg-white px-4 pt-5 pb-4 sm:p-6">                  <div className="flex justify-between items-center mb-4">                    <h3 className="text-lg font-medium">Edit Customer</h3>                    <button                        className="text-gray-400 hover:text-gray-600"                        onClick={() => {                          setShowEditCustomer(false);                          setSelectedCustomer(null);                          setError('');                        }}                    >                      <i className="fas fa-times"></i>                    </button>                  </div>                  <Error error={error} />                  <form className="space-y-4" onSubmit={(e) => {                    e.preventDefault();                    handleSaveCustomer();                  }}>                    <div>                      <label className="block text-sm font-medium text-gray-700">Full Name</label>                      <input                          type="text"                          name="name"                          maxLength={25}                          value={selectedCustomer.name || ''}                          onChange={handleEditChange}                          className="mt-1 block w-full rounded-lg border border-gray-300 px-3 py-2"                          required                      />                    </div>                    <div>                      <label className="block text-sm font-medium text-gray-700">Email</label>                      <input                          type="email"                          name="email"                          value={selectedCustomer.email || ''}                          onChange={handleEditChange}                          className="mt-1 block w-full rounded-lg border border-gray-300 px-3 py-2"                          required                      />                    </div>                    <div>                      <label className="block text-sm font-medium text-gray-700">Phone</label>                      <PhoneInput                          placeholder="Enter phone number"                          value={selectedCustomer.phone}                          onChange={(value) =>                              setSelectedCustomer({ ...selectedCustomer, phone: value })                          }                          className="mt-1 block w-full rounded-lg border border-gray-300 px-3 py-2"                          required                      />                    </div>                    <div>                      <label className="block text-sm font-medium text-gray-700">Address</label>                      <textarea                          name="address"                          value={selectedCustomer.address || ''}                          onChange={handleEditChange}                          className="mt-1 block w-full rounded-lg border border-gray-300 px-3 py-2"                          rows="3"                          required                      ></textarea>                    </div>                  </form>                </div>                <div className="bg-gray-50 px-4 py-3 sm:px-6 flex justify-end space-x-3">                  <button                      className="mt-3 sm:mt-0 sm:w-auto sm:text-sm w-24 inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"                      onClick={() => {                        setShowEditCustomer(false);                        setError("");                      }}                  >                    Cancel                  </button>                  <button                      type="submit"                      className="w-40 inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:ml-3 sm:w-auto sm:text-sm"                      onClick={handleSaveCustomer}                  >                    Save                  </button>                </div>              </div>            </div>        )}        {showAddCustomer && (            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">              <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">                <div className="bg-white px-4 pt-5 pb-4 sm:p-6">                  <div className="flex justify-between items-center mb-4">                    <h3 className="text-lg font-medium">Add Customer</h3>                    <button                        className="text-gray-400 hover:text-gray-600"                        onClick={() => {                          setShowAddCustomer(false);                          resetAddForm();                        }}                    >                      <i className="fas fa-times"></i>                    </button>                  </div>                  <Error error={error}/>                  <form className="space-y-4" onSubmit={(e) => {                    e.preventDefault();                    handleAddCustomer();                  }}>                    <div>                      <label className="block text-sm font-medium text-gray-700">Full Name</label>                      <input                          type="text"                          name="name"                          value={newCustomer.name}                          onChange={handleChange}                          className="mt-1 block w-full rounded-lg border border-gray-300 px-3 py-2"                          required                      />                    </div>                    <div>                      <label className="block text-sm font-medium text-gray-700">Email</label>                      <input                          type="email"                          name="email"                          value={newCustomer.email}                          onChange={handleChange}                          className="mt-1 block w-full rounded-lg border border-gray-300 px-3 py-2"                          required                      />                    </div>                    <div>                      <label className="block text-sm font-medium text-gray-700">Phone</label>                      <PhoneInput                          placeholder="Enter phone number"                          value={newCustomer.phone}                          onChange={(value) =>                              setNewCustomer({ ...newCustomer, phone: value })                          }                          className="mt-1 block w-full rounded-lg border border-gray-300 px-3 py-2"                          required                      />                    </div>                    <div>                      <label className="block text-sm font-medium text-gray-700">Address</label>                      <textarea                          name="address"                          value={newCustomer.address}                          onChange={handleChange}                          className="mt-1 block w-full rounded-lg border border-gray-300 px-3 py-2"                          rows="3"                          required                      ></textarea>                    </div>                  </form>                </div>                <div className="bg-gray-50 px-4 py-3 sm:px-6 flex justify-end space-x-3">                  <button                      className="mt-3 sm:mt-0 sm:w-auto sm:text-sm w-24 inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"                      onClick={() => {                        setShowAddCustomer(false);                        resetAddForm();                      }}                  >                    Cancel                  </button>                  <button                      type="submit"                      className="w-40 inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:ml-3 sm:w-auto sm:text-sm"                      onClick={handleAddCustomer}                  >                    Add                  </button>                </div>              </div>            </div>        )}      </section>  );};export default Customer;